#ifndef CW2245_H
#define CW2245_H
/* stm32x register locations */

#define FLASH_REG_BASE_B0 0x03000400
#define FLASH_REG_BASE_B1 0x03000800

#define INTR_MSK 0x00
#define INTR_CLR 0x04
#define INTR_STT 0x08
#define INTR_RAW 0x0C
#define EFLASH_CTRL 0x10
#define EFLASH_FSM 0x14
#define EFLASH_WR_ADDR 0x18
#define EFLASH_WR_CTRL 0x1C
#define EFLASH_WDAT0 0x20
#define EFLASH_WDAT1 0x24
#define EFLASH_WDAT2 0x28
#define EFLASH_WDAT3 0x2C
#define EFLASH_WDAT4 0x30
#define EFLASH_WDAT5 0x34
#define EFLASH_WDAT6 0x38
#define EFLASH_WDAT7 0x3C
#define EFLASH_ZONE0 0x40
#define EFLASH_ZONE1 0x44
#define EFLASH_ZONE2 0x48
#define EFLASH_ZONE3 0x4C
#define EFLASH_ZONE4 0x50
#define EFLASH_ZONE5 0x54
#define EFLASH_ZONE6 0x58
#define EFLASH_ZONE7 0x5C
#define EFLSH_RDN_CTRL 0x60
#define EFLASH_MISC 0x64
#define EFLASH_LCK_CFG 0x68
#define EFLASH_BYP 0x6C
#define EFLASH_WR_STT 0x70

enum REG_EFLASH_CTRL_INTR_MSK_FIELD
{
	REG_EFLASH_CTRL_INTR_MSK_WP_MASK = (int)0x1,
	REG_EFLASH_CTRL_INTR_MSK_WP_POS = 0,
	REG_EFLASH_CTRL_INTR_MSK_FSM_END_MASK = (int)0x2,
	REG_EFLASH_CTRL_INTR_MSK_FSM_END_POS = 1,
};

enum REG_EFLASH_CTRL_INTR_CLR_FIELD
{
	REG_EFLASH_CTRL_INTR_CLR_WP_MASK = (int)0x1,
	REG_EFLASH_CTRL_INTR_CLR_WP_POS = 0,
	REG_EFLASH_CTRL_INTR_CLR_FSM_END_MASK = (int)0x2,
	REG_EFLASH_CTRL_INTR_CLR_FSM_END_POS = 1,
};

enum REG_EFLASH_CTRL_INTR_STT_FIELD
{
	REG_EFLASH_CTRL_INTR_STT_WP_MASK = (int)0x1,
	REG_EFLASH_CTRL_INTR_STT_WP_POS = 0,
	REG_EFLASH_CTRL_INTR_STT_FSM_END_MASK = (int)0x2,
	REG_EFLASH_CTRL_INTR_STT_FSM_END_POS = 1,
};

enum REG_EFLASH_CTRL_INTR_RAW_FIELD
{
	REG_EFLASH_CTRL_INTR_RAW_WP_MASK = (int)0x1,
	REG_EFLASH_CTRL_INTR_RAW_WP_POS = 0,
	REG_EFLASH_CTRL_INTR_RAW_FSM_END_MASK = (int)0x2,
	REG_EFLASH_CTRL_INTR_RAW_FSM_END_POS = 1,
};

enum REG_EFLASH_CTRL_EFLSH_CTRL_FIELD
{
	REG_EFLASH_CTRL_EFLSH_PORB_MASK = (int)0x1,
	REG_EFLASH_CTRL_EFLSH_PORB_POS = 0,
	REG_EFLASH_CTRL_EFLSH_CEB_MASK = (int)0x2,
	REG_EFLASH_CTRL_EFLSH_CEB_POS = 1,
	REG_EFLASH_CTRL_EFLSH_DPD_MASK = (int)0x4,
	REG_EFLASH_CTRL_EFLSH_DPD_POS = 2,
	REG_EFLASH_CTRL_EFLSH_TMEN_MASK = (int)0x8,
	REG_EFLASH_CTRL_EFLSH_TMEN_POS = 3,
	REG_EFLASH_CTRL_EFLSH_RECALL_MASK = (int)0x10,
	REG_EFLASH_CTRL_EFLSH_RECALL_POS = 4,
	REG_EFLASH_CTRL_EFLSH_VREAD_MASK = (int)0x20,
	REG_EFLASH_CTRL_EFLSH_VREAD_POS = 5,
};

enum REG_EFLASH_CTRL_EFLSH_FSM_FIELD
{
	REG_EFLASH_CTRL_FSM_CHIP_MASK = (int)0x1,
	REG_EFLASH_CTRL_FSM_CHIP_POS = 0,
	REG_EFLASH_CTRL_FSM_RETRY_MASK = (int)0x6,
	REG_EFLASH_CTRL_FSM_RETRY_POS = 1,
	REG_EFLASH_CTRL_FSM_PROG_LEN_MASK = (int)0x70,
	REG_EFLASH_CTRL_FSM_PROG_LEN_POS = 4,
	REG_EFLASH_CTRL_FSM_IS_ERAS_MASK = (int)0x80,
	REG_EFLASH_CTRL_FSM_IS_ERAS_POS = 7,
	REG_EFLASH_CTRL_FSM_IS_PROG_MASK = (int)0x100,
	REG_EFLASH_CTRL_FSM_IS_PROG_POS = 8,
};

enum REG_EFLASH_CTRL_EFLSH_WR_ADDR_FIELD
{
	REG_EFLASH_CTRL_EFLSH_WR_ADDR_MASK = (int)0x7fff,
	REG_EFLASH_CTRL_EFLSH_WR_ADDR_POS = 0,
	REG_EFLASH_CTRL_EFLSH_WR_ARRDN_MASK = (int)0x30000,
	REG_EFLASH_CTRL_EFLSH_WR_ARRDN_POS = 16,
	REG_EFLASH_CTRL_EFLSH_WR_NVR_MASK = (int)0x40000,
	REG_EFLASH_CTRL_EFLSH_WR_NVR_POS = 18,
	REG_EFLASH_CTRL_EFLSH_WR_NVR_CFG_MASK = (int)0x80000,
	REG_EFLASH_CTRL_EFLSH_WR_NVR_CFG_POS = 19,
};

enum REG_EFLASH_CTRL_EFLSH_WR_CTRL_FIELD
{
	REG_EFLASH_CTRL_FSM_STRT_MASK = (int)0x1,
	REG_EFLASH_CTRL_FSM_STRT_POS = 0,
	REG_EFLASH_CTRL_FSM_STOP_MASK = (int)0x2,
	REG_EFLASH_CTRL_FSM_STOP_POS = 1,
};

enum REG_EFLASH_CTRL_EFLSH_ZONEx_FIELD
{
	REG_EFLASH_CTRL_ZONEx_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONEx_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONEx_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONEx_END_POS = 8,
	REG_EFLASH_CTRL_ZONEx_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONEx_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE0_FIELD
{
	REG_EFLASH_CTRL_ZONE0_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE0_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE0_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE0_END_POS = 8,
	REG_EFLASH_CTRL_ZONE0_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE0_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE1_FIELD
{
	REG_EFLASH_CTRL_ZONE1_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE1_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE1_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE1_END_POS = 8,
	REG_EFLASH_CTRL_ZONE1_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE1_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE2_FIELD
{
	REG_EFLASH_CTRL_ZONE2_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE2_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE2_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE2_END_POS = 8,
	REG_EFLASH_CTRL_ZONE2_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE2_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE3_FIELD
{
	REG_EFLASH_CTRL_ZONE3_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE3_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE3_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE3_END_POS = 8,
	REG_EFLASH_CTRL_ZONE3_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE3_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE4_FIELD
{
	REG_EFLASH_CTRL_ZONE4_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE4_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE4_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE4_END_POS = 8,
	REG_EFLASH_CTRL_ZONE4_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE4_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE5_FIELD
{
	REG_EFLASH_CTRL_ZONE5_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE5_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE5_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE5_END_POS = 8,
	REG_EFLASH_CTRL_ZONE5_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE5_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE6_FIELD
{
	REG_EFLASH_CTRL_ZONE6_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE6_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE6_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE6_END_POS = 8,
	REG_EFLASH_CTRL_ZONE6_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE6_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_ZONE7_FIELD
{
	REG_EFLASH_CTRL_ZONE7_STRT_MASK = (int)0xff,
	REG_EFLASH_CTRL_ZONE7_STRT_POS = 0,
	REG_EFLASH_CTRL_ZONE7_END_MASK = (int)0xff00,
	REG_EFLASH_CTRL_ZONE7_END_POS = 8,
	REG_EFLASH_CTRL_ZONE7_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_ZONE7_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_RDN_CTRL_FIELD
{
	REG_EFLASH_CTRL_RDN_SEC0_MASK = (int)0xff,
	REG_EFLASH_CTRL_RDN_SEC0_POS = 0,
	REG_EFLASH_CTRL_RDN_SEC1_MASK = (int)0xff00,
	REG_EFLASH_CTRL_RDN_SEC1_POS = 8,
	REG_EFLASH_CTRL_RDN_SEC0_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_RDN_SEC0_EN_POS = 16,
	REG_EFLASH_CTRL_RDN_SEC1_EN_MASK = (int)0x20000,
	REG_EFLASH_CTRL_RDN_SEC1_EN_POS = 17,
};

enum REG_EFLASH_CTRL_EFLSH_MISC_FIELD
{
	REG_EFLASH_CTRL_RD_LTCH_EN_MASK = (int)0x1,
	REG_EFLASH_CTRL_RD_LTCH_EN_POS = 0,
	REG_EFLASH_CTRL_AHB_8MHZ_MASK = (int)0x2,
	REG_EFLASH_CTRL_AHB_8MHZ_POS = 1,
	REG_EFLASH_CTRL_SECU_OUT_EN_MASK = (int)0x4,
	REG_EFLASH_CTRL_SECU_OUT_EN_POS = 2,
};

enum REG_EFLASH_CTRL_EFLSH_BYP_FIELD
{
	REG_EFLASH_CTRL_EFLSH_BYP_WEB_MASK = (int)0x1,
	REG_EFLASH_CTRL_EFLSH_BYP_WEB_POS = 0,
	REG_EFLASH_CTRL_EFLSH_BYP_PROG_MASK = (int)0x2,
	REG_EFLASH_CTRL_EFLSH_BYP_PROG_POS = 1,
	REG_EFLASH_CTRL_EFLSH_BYP_PREPG_MASK = (int)0x4,
	REG_EFLASH_CTRL_EFLSH_BYP_PREPG_POS = 2,
	REG_EFLASH_CTRL_EFLSH_BYP_PROG2_MASK = (int)0x8,
	REG_EFLASH_CTRL_EFLSH_BYP_PROG2_POS = 3,
	REG_EFLASH_CTRL_EFLSH_BYP_ERASE_MASK = (int)0x10,
	REG_EFLASH_CTRL_EFLSH_BYP_ERASE_POS = 4,
	REG_EFLASH_CTRL_EFLSH_BYP_CHIP_MASK = (int)0x20,
	REG_EFLASH_CTRL_EFLSH_BYP_CHIP_POS = 5,
	REG_EFLASH_CTRL_EFLSH_BYP_RETRY_MASK = (int)0xc0,
	REG_EFLASH_CTRL_EFLSH_BYP_RETRY_POS = 6,
	REG_EFLASH_CTRL_EFLSH_BYP_CONFEN_MASK = (int)0x100,
	REG_EFLASH_CTRL_EFLSH_BYP_CONFEN_POS = 8,
	REG_EFLASH_CTRL_EFLSH_BYP_EN_MASK = (int)0x10000,
	REG_EFLASH_CTRL_EFLSH_BYP_EN_POS = 16,
};

enum REG_EFLASH_CTRL_EFLSH_WR_STT_FIELD
{
	REG_EFLASH_CTRL_FSM_BSY_MASK = (int)0x1,
	REG_EFLASH_CTRL_FSM_BSY_POS = 0,
	REG_EFLASH_CTRL_IS_ERAS_MASK = (int)0x2,
	REG_EFLASH_CTRL_IS_ERAS_POS = 1,
	REG_EFLASH_CTRL_IS_PROG_MASK = (int)0x4,
	REG_EFLASH_CTRL_IS_PROG_POS = 2,
	REG_EFLASH_CTRL_KEY_WPROT_MASK = (int)0x7f8,
	REG_EFLASH_CTRL_KEY_WPROT_POS = 3,
};

#define USER_ADDR_TO_A14_0(addr) (((addr) & 0x1FFFF) >> 2)
#define A14_0_TO_USER_ADDR(A14_0) ((A14_0) << 2)
#define SECTOR_ADDR(addr) ((addr) & ~(EFLASH_SECTOR_SIZE - 1))

#endif